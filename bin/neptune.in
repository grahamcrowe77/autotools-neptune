#!/usr/bin/env escript
%% -*- erlang -*-
%%! -pa ebin

-define(SYSCONFDIR, <<".">>).
-define(COMMAND_NAME, <<"neptune">>).

main(Args) ->
    InPars = neptune_mod:parse_args(Args),
    Pars = InPars#{sysconfdir => ?SYSCONFDIR},
    case Pars of
	#{help := null} ->
	    ok = manpage(),
	    halt(0);
	#{version := null} ->
	    ok = version(),
	    halt(0);
	#{type := Type}
	  when Type =:= <<"app">>
	       orelse
	       Type =:= <<"rel">> ->
	    case neptune_mod:skeleton(Pars) of
		ok ->
		    halt(0);
		{error, Reason} ->
		    ok = reason(Reason, Pars),
		    halt(1)
	    end;
	#{type := _Type} ->
	    ok = reason(not_supported, Pars),
	    halt(1)
    end.

manpage() ->
    Cmd = "man " ++ binary_to_list(?COMMAND_NAME),
    None = "No manual entry for " ++ binary_to_list(?COMMAND_NAME) ++ "\n",
    case os:cmd(Cmd) of
	None ->
	    usage();
	ManPage ->
	    ok = io:format("~s", [ManPage])
    end.

usage() ->
    ok = io:format("~s Name~n", [?COMMAND_NAME]),
    ok = io:format("~s [--help]~n", [?COMMAND_NAME]),
    Format = "see manual page for ~s(1) for more details~n",
    ok = io:format(Format, [?COMMAND_NAME]).

version() ->
    ok = io:format("~s ~s~n", [?COMMAND_NAME, "@PACKAGE_VERSION@"]).

reason(not_supported, #{type := Type}) ->
    ok = io:format("~s is not supported~n", [Type]);
reason(no_name, #{}) ->
    ok = io:format("No name provided~n");
reason(bad_name, #{name := Name}) ->
    ok = io:format("~s includes a path~n", [Name]);
reason(name_is_dir, #{name := Name}) ->
    ok = io:format("~s is a directory~n", [Name]);
reason(name_exists, #{name := Name}) ->
    ok = io:format("~s already exists~n", [Name]).
